classdef RegionSettings < redux.Component & redux.State.Listener
	
	properties
		gui
		regionSettingIds
	end
	
	methods
		function this = RegionSettings()
			this.regionSettingIds = struct();
		end
		
		function gui = renderRegionConstants(this, gui)
			gui.RegionConstants = redux.Component.Layout.Grid( ...
				gui.RightBoxGrid, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			% 1-1 + Region name textbox
			gui.RegionNamePanel = redux.Component.Layout.Panel( ...
				gui.RegionConstants, ...
				'Title', 'Region name' ...
			);
			gui.RegionName = vt.Component.TextBox.RegionName( ...
				gui.RegionNamePanel ...
			);
		
			% 2-1 + Region Shape popup (drop-down) menu
			gui.RegionShapePanel = redux.Component.Layout.Panel( ...
				gui.RegionConstants, ...
				'Title', 'Region shape' ...
			);
			gui.RegionShapePopup = vt.Component.Popup.RegionShape( ...
				gui.RegionShapePanel ...
			);
		
			% 3-1 + Region Type popup (drop-down) menu
			gui.RegionTypePanel = redux.Component.Layout.Panel( ...
				gui.RegionConstants, ...
				'Title', 'Region type' ...
			);
			gui.RegionTypePopup = vt.Component.Popup.RegionType( ...
				gui.RegionTypePanel ...
			);
		
			% 4 + Empty placeholder
			gui.RegionConstantsPlaceholder = redux.Component.Layout.Empty( ...
				gui.RegionConstants ...
			);
		
			gui.RegionConstants.setParameters('Widths', [-1 -1], 'Heights', [-1 -1]);
		end
		
		function setRegionSettingId(this, shape)
			this.regionSettingIds.(shape) = numel(fields(this.regionSettingIds)) + 1;
		end
		
		function gui = addCircleParameters(this, gui)
			gui.RegionParameters_Circle = redux.Component.Layout.Grid( ...
				gui.RegionParameters, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
			
			% Radius
			gui.RegionRadiusPanel = redux.Component.Layout.Panel( ...
				gui.RegionParameters_Circle, ...
				'Title', 'Radius' ...
			);
			gui.RegionRadius = vt.Component.TextBox.Radius( ...
				gui.RegionRadiusPanel ...
			);
		
			% Change color button
			gui.RegionColor_Circle = vt.Component.Button.RegionColor( ...
				gui.RegionParameters_Circle, ...
				'Change color' ...
			);
		
			gui.RegionParameters_Circle.setParameters('Widths', [-1], 'Heights', [-1 -1]);
		
			this.setRegionSettingId('circle');
		end
		
		function gui = addRectangleParameters(this, gui)
			gui.RegionParameters_Rectangle = redux.Component.Layout.Grid( ...
				gui.RegionParameters, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			% Width
			gui.RegionWidthPanel = redux.Component.Layout.Panel( ...
				gui.RegionParameters_Rectangle, ...
				'Title', 'Width' ...
			);
			gui.RegionWidth = vt.Component.TextBox.Width( ...
				gui.RegionWidthPanel ...
			);
		
			% Height
			gui.RegionHeightPanel = redux.Component.Layout.Panel( ...
				gui.RegionParameters_Rectangle, ...
				'Title', 'Height' ...
			);
			gui.RegionHeight = vt.Component.TextBox.Height( ...
				gui.RegionHeightPanel ...
			);
		
			% Change color button
			gui.RegionColor_Rectangle = vt.Component.Button.RegionColor( ...
				gui.RegionParameters_Rectangle, ...
				'Change color' ...
			);
		
			% + Timeseries display for centroid
			gui.TimeseriesDimensionPanel = redux.Component.Layout.Panel( ...
				gui.RegionParameters, ...
				'Title', 'Dimension' ...
			);
			gui.RegionShapePopup = vt.Component.Popup.TimeseriesDimension( ...
				gui.TimeseriesDimensionPanel ...
			);
		
			gui.RegionParameters_Rectangle.setParameters('Widths', [-1 -1], 'Heights', [-1 -1]);
		
			this.setRegionSettingId('rectangle');
		end
		
		function gui = addStatisticalRegionParameters(this, gui)
			gui.RegionParameters_Stat = redux.Component.Layout.Grid( ...
				gui.RegionParameters, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			% Minimum # pixels textbox
			this.gui.RegionMinimumPixelsPanel = redux.Component.Layout.Panel( ...
				this.gui.RegionParameters_Stat, ...
				'Title', 'Minimum number of pixels' ...
			);
			this.gui.RegionMinimumPixels = vt.Component.TextBox.MinimumPixels( ...
				this.gui.RegionNumPixels ...
			);
			
			% Search radius textbox
			this.gui.RegionSearchRadiusPanel = redux.Component.Layout.Panel( ...
				this.gui.RegionParameters_Stat, ...
				'Title', 'Search radius' ...
			);
			this.gui.RegionSearchRadius = vt.Component.TextBox.SearchRadius( ...
				this.gui.RegionSearchRadiusPanel ...
			);
			
			% Tau textbox
			this.gui.RegionTauPanel = redux.Component.Layout.Panel( ...
				this.gui.RegionParameters_Stat, ...
				'Title', 'Tau' ...
			);
			this.gui.RegionTau = vt.Component.TextBox.Tau( ...
				this.gui.RegionTau ...
			);
		
			gui.RegionParameters_Stat.setParameters('Widths', [-1 -1], 'Heights', [-1 -1]);
		
			this.setRegionSettingId('statistically_generated');
		end
		
		function gui = addRegionParameters(this, gui)
			gui.RegionParameters = redux.Component.Layout.CardPanel( ...
				gui.RightBoxGrid, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
			
			gui = this.renderStatisticalRegionParameters(gui);
			gui = this.renderRectangleParameters(gui);
			gui = this.renderCircleParameters(gui);
			
			gui.RegionParameters.setParameters('Widths', [-1 -1], 'Heights', [-1 -1]);
		end
		
		function gui = addRegionDisplay(this, gui)
			gui.RegionDisplay = redux.Component.Layout.Grid( ...
				gui.RightBoxGrid, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			% Show origin checkbox
			gui.ShowOriginCheckbox = vt.Component.Checkbox.ShowOrigin( ...
				gui.RegionDisplay, ...
				'Show origin' ...
			);
		
			% Show outline checkbox
			gui.ShowOutlineCheckbox = vt.Component.Checkbox.ShowOutline( ...
				gui.RegionDisplay, ...
				'Show outline' ...
			);
		
			gui.RegionDisplay.setParameters('Widths', [-1], 'Heights', [-1]);
		end
		
		function gui = addRegionButtons(this, gui)
			gui.RegionButtonsPanel = redux.Component.Layout.CardPanel( ...
				gui.RightBoxGrid, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			% Panel view 2: Edit region mode
			gui.RegionButtonsView2 = redux.Component.Layout.Grid( ...
				gui.RightButtonsPanel, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
			gui.RegionButtonsEmpty1 = redux.Component.Layout.Empty( ...
				gui.RegionButtonsView2 ...
			);
			gui.DeleteRegionButton_Edit = vt.Component.Button.DeleteRegion( ...
				gui.RegionButtonsView2, ...
				'Delete region' ...
			);
			gui.StopEditingButton = vt.Component.Button.StopEditing( ...
				gui.RegionButtonsView2, ...
				'Stop editing' ...
			);
			gui.RegionButtonsView2.setParameters('Widths', [-1], 'Heights', [-1]);
			
			% Panel view 1
			gui.RegionButtonsView1 = redux.Component.Layout.Grid( ...
				gui.RightButtonsPanel, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
			gui.NewRegionButton = vt.Component.Button.NewRegion( ...
				gui.RegionButtonsView1, ...
				'New region' ...
			);
			gui.EditRegionButton = vt.Component.Button.EditRegion( ...
				gui.RegionButtonsView1, ...
				'Edit region' ...
			);
			gui.DeleteRegionButton_Default = vt.Component.Button.DeleteRegion( ...
				gui.RegionButtonsView1, ...
				'Delete region' ...
			);
			gui.RegionButtonsView1.setParameters('Widths', [-1], 'Heights', [-1]);
		end
		
		function gui = addRegionSettingsGrid(this, gui)
			gui.RightBoxGrid = redux.Component.Layout.VBox( ...
				gui.RegionSettingsTab, ...
				'Spacing', this.styles.Spacing + 2 ...
			);
		
			gui = this.renderRegionConstants(gui);
			gui = this.renderRegionParameters(gui);
			gui = this.renderRegionDisplay(gui);
			gui = this.renderRegionButtons(gui);
			
			gui.RightBoxGrid.setParameters('Widths', [-1], 'Heights', -1.*ones(1, 4));
			
			this.gui = gui;
		end
		
		function [] = redrawRegionEditingArea(this, state)
			% REDRAW REGION EDITING AREA
			% Prevent re-drawing when other changes than shape changes are made
			curRegion = [];
			for iRegion = 1:numel(state.regions)
				if state.regions{iRegion}.id == state.currentRegion
					curRegion = state.regions{iRegion};
					break;
				end
			end
% 			if isempty(curRegion) || strcmp(this.currentRegion.shape, curRegion.shape)
% 				return;
% 			end
			
			this.gui.RegionParameters.setParameters( ...
				'Selection', lower(strrep(this.regionSettingIds.(curRegion.shape), '-', '_')) ...
			);
			
			% Update the local copy of currentRegion
% 			this.currentRegion = curRegion;
		end
		
		%%% State.Listener functions
		function [] = onCurrentRegionChange(this, state)
			% Sets this.currentRegion = currentRegion
			this.redrawRegionEditingArea(state);
		end
		
		function [] = onRegionsChange(this, state)
			% TODO: You should probably show currentRegion's timeseries too. Maybe you
			% can color the back panel differently to indicate that it's
			% temporary, somehow?
			
			% TODO: order display by (xcoordinate + ycoordinate) increasing
			
			this.redrawRegionEditingArea(state);
		end
	end
	
end

